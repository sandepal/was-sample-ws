# COPYRIGHT LICENSE: 
# This information contains sample code provided in source code form. You may 
# copy, modify, and distribute these sample programs in any form without 
# payment to IBM for the purposes of developing, using, marketing or 
# distributing application programs conforming to the application programming
# interface for the operating platform for which the sample code is written. 
# Notwithstanding anything to the contrary, IBM PROVIDES THE SAMPLE SOURCE CODE
# ON AN "AS IS" BASIS AND IBM DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, 
# INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OR CONDITIONS OF 
# MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, 
# TITLE, AND ANY WARRANTY OR CONDITION OF NON-INFRINGEMENT. IBM SHALL NOT BE 
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OR OPERATION OF THE SAMPLE SOURCE CODE. IBM HAS NO 
# OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS OR 
# MODIFICATIONS TO THE SAMPLE SOURCE CODE.
#----------------------------------------------------------------------
# AdminUtil.jacl - JACL procedures for performing samples
#       administration tasks.
#----------------------------------------------------------------------
#
#   This script can create the following resources:
#      J2C Resource Adapters
#      JAAS Authenication Aliases
#      JDBC Providers
#      Datasources
#      Connection Factories
#      Work Managers
#      Schedulers
#      SI Buses
#      SIB JMS Connection Factories
#      SIB JMS Queues
#      SIB JMS Topics
#      SIB Queues
#      SIB JMS Activation Specs
#      Shared Libraries
#      Library References
#
#   This script can perform the following tasks:
#      Enable Services
#      Install Sample Applications
#
#
#   The script is not intended to be run alone.
#  
#----------------------------------------------------------------------

#--------------------------------------------------------------------
# Set global constants
#--------------------------------------------------------------------
set TRACE_ENABLED false

proc createJ2CResourceAdapter {nodeName serverName} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  #--------------------------------------------------------------------
  # Create J2C resource adapter
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create J2C resource adapter                      "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " Resource adapter:                                             "
  puts "    name                WebSphere Relational Resource Adapter  "
  puts "---------------------------------------------------------------"
  puts ""


  set rraID [$AdminConfig getid "/Node:$nodeName/Server:$serverName/J2CResourceAdapter:WebSphere Relational Resource Adapter/"]
  if {[llength $rraID] == 0} {

    putTrace "Get the J2C templates."
    set template [lindex [$AdminConfig listTemplates J2CResourceAdapter "WebSphere Relational Resource Adapter"] 0]
    if {[llength $template] == 0} {
      throw "The WebSphere Relational Resource Adapter J2CResourceAdapter template could not be found."
    }

    set serverID [$AdminConfig getid /Node:$nodeName/Server:$serverName]
    if {[llength $serverID] == 0} {
      throw "The ID for /Node:$nodeName/Server:$serverName could not be found."
    }

    putTrace "Create the J2C adapter using the $template template."
    $AdminConfig createUsingTemplate J2CResourceAdapter $serverID {{name "WebSphere Relational Resource Adapter"} {description "Built-in Relational Resource Adapter for Container Managed Persistence"}} $template
  } else {
    putInfo "The J2C resource adapter already exists."
  }

}

proc createJAASAuthenticationAlias {cellName authAlias descript uid password} {

  #--------------------------------------------------------------------
  # Set up globals  
  #--------------------------------------------------------------------

  global AdminConfig

  #--------------------------------------------------------------------
  # Create JAAS Authenication Alias
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create JAAS authentication alias                  "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    cell                $cellName                              "
  puts " Authentication alias:                                         "
  puts "    alias               $authAlias                             "
  puts "    description         $descript                              "
  puts "    user ID             $uid                                   "
  puts "    password            *********                              "
  puts "---------------------------------------------------------------"
  puts ""

  #--------------------------------------------------------------------
  # Get the config id for the cell's security object
  #--------------------------------------------------------------------

  putTrace "Get the cell's security object."

  set sec [$AdminConfig getid /Cell:$cellName/Security:/]

  #--------------------------------------------------------------------
  # Create the JAASAuthData object
  #--------------------------------------------------------------------

  set authAliasTest "alias $authAlias"
  foreach authDataEntry [$AdminConfig list JAASAuthData] {
    foreach authAliasEntry [$AdminConfig show $authDataEntry alias] {
      if { $authAliasTest == $authAliasEntry } {
        putInfo "The $authAlias alias already exists."
        return
      }     
    }
  }

  putTrace "Create the $authAlias JAASAuthData object."
  set alias_attr    [list alias $authAlias]
  set desc_attr     [list description $descript]
  set userid_attr   [list userId $uid]
  set password_attr [list password $password]
  set attrs [list $alias_attr $desc_attr $userid_attr $password_attr]
  set contauthdata [$AdminConfig create JAASAuthData $sec $attrs]

}

proc createJDBCProvider {nodeName serverName templateName providerName} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  #--------------------------------------------------------------------
  # Create Provider
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create JDBC provider                             "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " JDBC provider:                                                "
  puts "    template            $templateName                          "
  puts "    name                $providerName                          "
  puts "---------------------------------------------------------------"
  puts ""

  #--------------------------------------------------------------------
  # Get all templates whose name contain templateName
  #--------------------------------------------------------------------

  set templates [$AdminConfig listTemplates JDBCProvider $templateName]
  
  #--------------------------------------------------------------------
  # Get the template that is named templateName
  #--------------------------------------------------------------------

  foreach templateEntry $templates {
    set name [$AdminConfig showAttribute $templateEntry name] 
    putTrace "Checking for match with $name"
    if {$name == $templateName} {
      set template $templateEntry
      break;
    }
  }

  if {![info exists template]} {
    throw "The $templateName JDBC provider template could not be found."
  }

  #--------------------------------------------------------------------
  # Get the config id for the node 
  #--------------------------------------------------------------------
  
  putTrace "Get the ID for /Node:$nodeName/Server:$serverName." 
  
  set scope [$AdminConfig getid /Node:$nodeName/Server:$serverName]
  if {[llength $scope] == 0} {
     throw "The ID for /Node:$nodeName/Server:$serverName could not be found." 
  }

  #--------------------------------------------------------------------
  # Create a new JDBCProvider using this template 
  #--------------------------------------------------------------------

  set jdbcProvider [$AdminConfig getid /Node:$nodeName/Server:$serverName/JDBCProvider:$providerName]
  if {[llength $jdbcProvider] == 0} {
  
    putTrace "Create the $providerName JDBC provider."
    
    set name_attr [list name $providerName]
    set attrs [list $name_attr]
    set newProv [$AdminConfig createUsingTemplate JDBCProvider $scope $attrs $template]
    
    #--------------------------------------------------------------------
    # Remove the default Datasource that is added when the JDBC Provider
    # was created 
    #--------------------------------------------------------------------
    
    putTrace "Remove the default data source from $providerName."
    
    set defaultDS [$AdminConfig getid /Node:$nodeName/Server:$serverName/JDBCProvider:$providerName/DataSource:/]
    $AdminConfig remove $defaultDS

  } else {
    putInfo "The $providerName JDBC provider already exists."
  }

} 

proc createDatasource {nodeName serverName providerName templateName dsName dsJNDI dsDesc dsAuthMech dbName authAlias connAttrs} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------

  global AdminConfig

  #--------------------------------------------------------------------
  # Create DataSource
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create data source                               "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " JDBC provider:                                                "
  puts "    name                $providerName                          "
  puts " Datasource:                                                   "
  puts "    template            $templateName                          "
  puts "    name                $dsName                                "
  puts "    JNDI                $dsJNDI                                "
  puts "    description         $dsDesc                                "
  puts "    database name       $dbName                                "
  puts "    auth alias          $authAlias                             "
  puts "    connection attrs    $connAttrs                             "
  puts "---------------------------------------------------------------"
  puts ""

  set ds [$AdminConfig getid /Node:$nodeName/Server:$serverName/JDBCProvider:$providerName/DataSource:$dsName]
  if {[llength $ds] != 0} {
    putInfo "The $dsName data source already exists."
    return
  }
  
  #--------------------------------------------------------------------
  # Get the config id for a DataSource Template
  # Use "lindex" in case there is more than one matching templates (we
  # just get the first one) 
  #--------------------------------------------------------------------

  putTrace "Get the $templateName data source template."
  
  set template [lindex [$AdminConfig listTemplates DataSource $templateName] 0]
  if {[llength $template] == 0} {
     throw "The $templateName data source template could not be found."
  } 

  #--------------------------------------------------------------------
  # Get the config id for the provider 
  #--------------------------------------------------------------------
  
  putTrace "Get the ID for the $providerName provider."
  
  set provider [$AdminConfig getid /Node:$nodeName/Server:$serverName/JDBCProvider:$providerName]
  if {[llength $provider] == 0} {
     throw "The ID for the /Node:$nodeName/Server:$serverName/JDBCProvider:$providerName could not be found."
  } 
  
  #--------------------------------------------------------------------
  # Create a new Datasource using this template 
  # Note: This datasource will use the built in default RRA
  #--------------------------------------------------------------------
  
  putTrace "Create a new data source named $dsName." 

  set rraID [$AdminConfig getid "/Node:$nodeName/Server:$serverName/J2CResourceAdapter:WebSphere Relational Resource Adapter/"]

  set name_attr         [list name $dsName]
  set jndiName_attr     [list jndiName $dsJNDI]
  set desc_attr         [list description $dsDesc]
  set rra [list relationalResourceAdapter $rraID]
  set authMechPref_attr [list authMechanismPreference $dsAuthMech]
  set databaseName_prop [list [list name databaseName] [list value $dbName] [list type java.lang.String]]
  set shutdownDB_prop   [list [list name shutdownDatabase] [list value ""] [list type java.lang.String]]
  set dataSrcName_prop  [list [list name dataSourceName] [list value ""] [list type java.lang.String]]
  set description_prop  [list [list name description] [list value ""] [list type java.lang.String]]
  set connAttribs_prop  [list [list name connectionAttributes] [list value $connAttrs] [list type java.lang.String]]
  set createDB_prop     [list [list name createDatabase] [list value ""] [list type java.lang.String]]
  set newprops          [list $databaseName_prop $shutdownDB_prop $dataSrcName_prop $description_prop $connAttribs_prop $createDB_prop]
  set resprops          [list resourceProperties $newprops]
  set ps_attr           [list propertySet [list $resprops]]
  # check if mapping needed
  if { !($authAlias == "N_O_N_E") } {
    set map_auth_attr   [list authDataAlias $authAlias] 
    set map_configalias_attr [list mappingConfigAlias "DefaultPrincipalMapping"] 
    set map_attrs       [list $map_auth_attr $map_configalias_attr]
    set mapping_attr    [list mapping $map_attrs]
    set attrs           [list $name_attr $jndiName_attr $desc_attr $rra $authMechPref_attr $map_auth_attr $ps_attr $mapping_attr]
  } else {
    set attrs           [list $name_attr $jndiName_attr $desc_attr $rra $authMechPref_attr $ps_attr]
  }
  set newDS [$AdminConfig createUsingTemplate DataSource $provider $attrs $template]

}

proc createConnectionFactory {nodeName serverName providerName dsName cfName cfAuthMech authAlias cfi} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  #--------------------------------------------------------------------
  # Create connection factory
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create connection factory                        "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " JDBC provider:                                                "
  puts "    name                $providerName                          "
  puts " Datasource:                                                   "
  puts "    name                $dsName                                "
  puts " Connection factory:                                           "
  puts "    name                $cfName                                "
  puts "    auth mechanism      $cfAuthMech                            "
  puts "    auth alias          $authAlias                             "
  puts "    interface           $cfi                                   "
  puts "---------------------------------------------------------------"
  puts ""

  set cf [$AdminConfig getid "/Node:$nodeName/Server:$serverName/J2CResourceAdapter:WebSphere Relational Resource Adapter/CMPConnectorFactory:$cfName"]
  if {[llength $cf] != 0} {
    putInfo "The $cfName connection factory already exists."
    return
  }

  #--------------------------------------------------------------------
  # Get IDs that we will need to make the CF
  #--------------------------------------------------------------------

  putTrace "Get the ID for the default relational resource adapter and the ID for the $dsName data source."
  
  set rraID [$AdminConfig getid "/Node:$nodeName/Server:$serverName/J2CResourceAdapter:WebSphere Relational Resource Adapter/"]
  set dsID [$AdminConfig getid /Node:$nodeName/Server:$serverName/JDBCProvider:$providerName/DataSource:$dsName/]

  #--------------------------------------------------------------------
  # Create CF using default RRA
  #--------------------------------------------------------------------

  putTrace "Create the $cfName connection factory for the $dsName database."
  
  set name_attr       [list name $cfName]
  set authmech_attr   [list authMechanismPreference $cfAuthMech]
  set cmpds_attr      [list cmpDatasource $dsID]

  #--------------------------------------------------------------------
  # Get ConnectionDefinition
  #--------------------------------------------------------------------

  set dd [$AdminConfig showAttribute $rraID deploymentDescriptor]
  set radapter [$AdminConfig showAttribute $dd resourceAdapter]
  set out  [$AdminConfig showAttribute $radapter outboundResourceAdapter]
  set cdlist [lindex [$AdminConfig showAttribute $out connectionDefinitions] 0]

  putTrace "Locate the $cfi connection factory interface."
  foreach cd $cdlist {
    set intf [$AdminConfig showAttribute $cd connectionFactoryInterface] 
    if {$intf == $cfi } {
      break;
    }
  }
  set cd_attr [list connectionDefinition $cd]

  putTrace "Create a new connection factory named $cfName."

  # check if mapping needed
  if { !($authAlias == "N_O_N_E") } {
    set map_auth_attr [list authDataAlias $authAlias] 
    set map_attrs     [list $map_auth_attr]
    set mapping_attr  [list mapping $map_attrs]
    set attrs         [list $name_attr $authmech_attr $cmpds_attr $mapping_attr $cd_attr]
  } else {
    set attrs         [list $name_attr $authmech_attr $cmpds_attr $cd_attr]
  }
  set newCF [$AdminConfig create CMPConnectorFactory $rraID $attrs]
  
}

proc createWorkManager {nodeName serverName wmName wmDesc wmJNDI wmCategory wmNumAlarmThreads wmMinThreads wmMaxThreads wmThreadPriority wmIsGrowable wmServiceNames} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  #--------------------------------------------------------------------
  # Create work manager info
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create work manager                              "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " Work manager:                                                 "
  puts "    name                $wmName                                "
  puts "    description         $wmDesc                                "
  puts "    JNDI                $wmJNDI                                "
  puts "    category            $wmCategory                            "
  puts "    num alarm threads   $wmNumAlarmThreads                     "
  puts "    min threads         $wmMinThreads                          "
  puts "    max threads         $wmMaxThreads                          "
  puts "    thread priority     $wmThreadPriority                      "
  puts "    growable            $wmIsGrowable                          "
  puts "    service names       $wmServiceNames                        "
  puts "---------------------------------------------------------------"
  puts ""

  #--------------------------------------------------------------------
  # Check if the work manager already exists
  #--------------------------------------------------------------------

  set server [$AdminConfig getid /Node:$nodeName/Server:$serverName]
  foreach workManagerInfoEntry [$AdminConfig list WorkManagerInfo $server] {
    set workManagerNameOfEntry [$AdminConfig showAttribute $workManagerInfoEntry name]
    if { [string compare $workManagerNameOfEntry $wmName] == 0 } {
      putInfo "The $wmName work manager already exists."
      return
    }
  }

  #--------------------------------------------------------------------
  # Get the work manager provider
  #--------------------------------------------------------------------

  putTrace "Get the ID for the default work manager provider."
  set workManagerProvider [$AdminConfig getid /Node:$nodeName/Server:$serverName/WorkManagerProvider:/]
  if {[llength $workManagerProvider] == 0} {
    throw "The ID for /Node:$nodeName/Server:$serverName/WorkManagerProvider:/ could not be found."
  }

  #--------------------------------------------------------------------
  # Create the work manager
  #--------------------------------------------------------------------

  putTrace "Create a new work manager named $wmName."
  set name_attr            [list name $wmName]
  set description_attr     [list description $wmDesc]
  set jndiName_attr        [list jndiName $wmJNDI]
  set category_attr        [list category $wmCategory]
  set numAlarmThreads_attr [list numAlarmThreads $wmNumAlarmThreads]
  set minThreads_attr      [list minThreads $wmMinThreads]
  set maxThreads_attr      [list maxThreads $wmMaxThreads]
  set threadPriority_attr  [list threadPriority $wmThreadPriority]
  set isGrowable_attr      [list isGrowable $wmIsGrowable]
  set serviceNames_attr    [list serviceNames $wmServiceNames]
  set attrs                [list $name_attr $description_attr $jndiName_attr $category_attr $numAlarmThreads_attr $minThreads_attr $maxThreads_attr $threadPriority_attr $isGrowable_attr $serviceNames_attr]
  set newWorkManager [$AdminConfig create WorkManagerInfo $workManagerProvider $attrs]

}

proc createScheduler {nodeName serverName schedName schedDesc schedJNDI schedCategory schedDsJNDI schedTablePrefix schedPollInterval wmName} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  #--------------------------------------------------------------------
  # Create scheduler
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create scheduler                                 "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " Scheduler:                                                    "
  puts "    name                $schedName                             "
  puts "    description         $schedDesc                             "
  puts "    JNDI                $schedJNDI                             "
  puts "    category            $schedCategory                         "
  puts "    data source JNDI    $schedDsJNDI                           "
  puts "    table prefix        $schedTablePrefix                      "
  puts "    poll interval       $schedPollInterval                     "
  puts "    work manager        $wmName                                "
  puts "---------------------------------------------------------------"
  puts ""

  set server [$AdminConfig getid /Node:$nodeName/Server:$serverName]

  #--------------------------------------------------------------------
  # Check if the scheduler configuration name already exists
  #--------------------------------------------------------------------

  foreach schedulerEntry [$AdminConfig list SchedulerConfiguration $server] {
    if {[string first $schedName $schedulerEntry] >= 0} {
      putInfo "The $schedName scheduler already exists."
      return
    }
  }

  #--------------------------------------------------------------------
  # Get the scheduler provider
  #--------------------------------------------------------------------

  putTrace "Get the ID for the default scheduler provider."
  set schedulerProvider [$AdminConfig getid /Node:$nodeName/Server:$serverName/SchedulerProvider:/]
  if {[llength $schedulerProvider] == 0} {
    throw "The ID for /Node:$nodeName/Server:$serverName/SchedulerProvider:/ could not be found."
  }

  #--------------------------------------------------------------------
  # Check if the work manager for the scheduler already exists
  #--------------------------------------------------------------------

  foreach workManagerInfoEntry [$AdminConfig list WorkManagerInfo $server] {
    set workManagerNameOfEntry [$AdminConfig showAttribute $workManagerInfoEntry name]
    if { [string compare $workManagerNameOfEntry $wmName] == 0 } {
      set workManager $workManagerInfoEntry
      break
    }
  }

  if {![info exists workManager]} {
    throw "The $wmName work manager could not be found."
  }

  #--------------------------------------------------------------------
  # Create the scheduler
  #--------------------------------------------------------------------

  putTrace "Create a new scheduler named $schedName."
  set category_attr             [list category $schedCategory]
  set datasourceJNDIName_attr   [list datasourceJNDIName $schedDsJNDI]
  set description_attr          [list description $schedDesc]
  set jndiName_attr             [list jndiName $schedJNDI]
  set name_attr                 [list name $schedName]
  set pollInterval_attr         [list pollInterval $schedPollInterval]
  set tablePrefix_attr          [list tablePrefix $schedTablePrefix]
  set workMangerInfo_attr       [list workManagerInfo $workManager]
  set attrs                     [list $category_attr $datasourceJNDIName_attr $description_attr $jndiName_attr $name_attr $pollInterval_attr $tablePrefix_attr $workMangerInfo_attr]
  set newScheduler [$AdminConfig create SchedulerConfiguration $schedulerProvider $attrs]

}

proc createMailSession {cellName nodeName providerName msName jndiName mailTransportHost mailFrom} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create mail session                              "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    cell                $cellName                              "
  puts "    node                $nodeName                              "
  puts " Mail provider:                                                "
  puts "    name                $providerName                          "
  puts " Mail session:                                                 "
  puts "    name                $msName                                "
  puts "    JNDI                $jndiName                              "
  puts "    transport host      $mailTransportHost                     "
  puts "    mail from           $mailFrom                              "
  puts "---------------------------------------------------------------"
  puts ""

  #--------------------------------------------------------------------
  # Set mail provider
  #--------------------------------------------------------------------

  set mailProvider [$AdminConfig getid /Node:$nodeName/MailProvider:$providerName]
  if {[llength $mailProvider] == 0} {
    throw "The ID for /Node:$nodeName/MailProvider:$providerName could not be found."
  } 

  #--------------------------------------------------------------------
  # Create mail session
  #--------------------------------------------------------------------

  set newMS [$AdminConfig getid /MailSession:$msName]
  if {[llength $newMS] == 0} {
    putTrace "Create a new mail session named $msName."
    set name_attr                   [list name $msName]
    set jndiName_attr               [list jndiName $jndiName]
    set mailTransportHost_attr      [list mailTransportHost $mailTransportHost]
    set mailFrom_attr               [list mailFrom $mailFrom]
    set debug_attr                  [list debug "false"]
    set mailTransportProtocol       "(cells/$cellName/nodes/$nodeName|resources.xml#builtin_smtp)"
    set mailTransportProtocol_attr  [list mailTransportProtocol $mailTransportProtocol]
    set mailStoreProtocol           "(cells/$cellName/nodes/$nodeName|resources.xml#builtin_pop3)"
    set mailStoreProtocol_attr      [list mailStoreProtocol $mailStoreProtocol]
    set attrs [list $name_attr $jndiName_attr $mailTransportHost_attr $mailFrom_attr $debug_attr $mailTransportProtocol_attr $mailStoreProtocol_attr]
    set newMS [$AdminConfig create MailSession $mailProvider $attrs]
  } else {
    putInfo "The $msName mail session already exists."
  }

}

proc getSamplesBusName {nodeName} {

  return [append nodeName "SamplesBus"]

}

proc createSIBus {nodeName serverName SIBusName} {

  #--------------------------------------------------------------------
  # Set up globals  
  #--------------------------------------------------------------------

  global AdminTask
  global AdminConfig

  #--------------------------------------------------------------------
  # Create a bus in the current cell.  As well as creating a bus, the
  # createSIBus command will create a default topic space on the bus.
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create SI bus                                    "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts " SI bus:                                                       "
  puts "    name                $SIBusName                             "
  puts "---------------------------------------------------------------"
  puts ""
 
  set bus [$AdminConfig getid /SIBus:$SIBusName]

  if {[llength $bus] == 0} {
    putTrace "Create a new SI bus named $SIBusName."
    $AdminTask createSIBus [list -bus $SIBusName -description "Messaging bus for samples"]
    $AdminTask addGroupToBusConnectorRole [list -bus $SIBusName -group sampadmn]
    $AdminTask addUserToBusConnectorRole [list -bus $SIBusName -user samples]
  } else {
    putInfo "The $SIBusName already exists."
  }

  #--------------------------------------------------------------------
  # Add SI bus member
  #--------------------------------------------------------------------

  addSIBusMember $nodeName $serverName $SIBusName

  #--------------------------------------------------------------------
  # Enable SIB service
  #--------------------------------------------------------------------

  enableService $nodeName $serverName SIBService

}

proc addSIBusMember {nodeName serverName SIBus} {

  #--------------------------------------------------------------------
  # Set up globals  
  #--------------------------------------------------------------------

  global AdminTask
  global AdminConfig

  #--------------------------------------------------------------------
  # Add the named server to the bus. The addSIBusMember command will:
  #    - Add the named server to the bus.
  #    - Create a messaging engine (plus datasources and datastores)
  #      at the server scope.
  #    - Localize the bus's topic spaces to the new ME.
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Add SI bus member                                "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " SI bus:                                                       "
  puts "    name                $SIBus                                 "
  puts "---------------------------------------------------------------"
  puts ""

  foreach member [$AdminTask listSIBusMembers [list -bus $SIBus]] {
    set memberNode [$AdminConfig showAttribute $member node]
    set memberServer [$AdminConfig showAttribute $member server]
    if { ($memberNode == $nodeName) && ($memberServer == $serverName) } {
      putInfo "The bus member already exists."
      return
    }
  }

  putTrace "Add the server named $serverName to the bus."
  $AdminTask addSIBusMember [list -bus $SIBus -node $nodeName -server $serverName -createDefaultDatasource true]

}

proc createSIBJMSConnectionFactory {nodeName jmsCFName jmsCFJNDI jmsCFDesc jmsCFType authAlias SIBusName} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig
  global AdminTask

  #--------------------------------------------------------------------
  # Create SIB JMS connection factory
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create SIB JMS connection factory                "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts " Connection factory:                                           "
  puts "    name                $jmsCFName                             "
  puts "    JNDI                $jmsCFJNDI                             "
  puts "    description         $jmsCFDesc                             "
  puts "    type                $jmsCFType                             "
  puts "    auth alias          $authAlias                             "
  puts " SI bus:                                                       "
  puts "    name                $SIBusName                             "
  puts "---------------------------------------------------------------"
  puts ""

  set jmsCF [$AdminConfig getid "/Node:$nodeName/J2CResourceAdapter:SIB JMS Resource Adapter/J2CConnectionFactory:$jmsCFName"]
  if {[llength $jmsCF] != 0} {
    putInfo "The $jmsCFName JMS connection factory already exists."
    return
  }

  #--------------------------------------------------------------------
  # Create the SIB JMS connection factory
  #--------------------------------------------------------------------

  set scope [$AdminConfig getid /Node:$nodeName/]

  putTrace "Create a new SIB JMS connection factory named $jmsCFName."
  set params [list -name $jmsCFName -jndiName $jmsCFJNDI -busName $SIBusName -description $jmsCFDesc]
  if { !($jmsCFType == "") } {
    lappend params -type $jmsCFType
  }
  if { !($authAlias == "") } {
    lappend params -authDataAlias $authAlias
  }
  
  $AdminTask createSIBJMSConnectionFactory $scope $params

}

proc createSIBJMSQueue {nodeName jmsQName jmsQJNDI jmsQDesc SIBQName} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig
  global AdminTask

  #--------------------------------------------------------------------
  # Create SIB JMS queue
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create SIB JMS queue                             "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts " SIB JMS queue:                                                "
  puts "    name                $jmsQName                              "
  puts "    JNDI                $jmsQJNDI                              "
  puts "    description         $jmsQDesc                              "
  puts "    SIB queue           $SIBQName                              "
  puts "---------------------------------------------------------------"
  puts ""

  #--------------------------------------------------------------------
  # Create SIB JMS queue that references a SIB queue
  #--------------------------------------------------------------------
  
  set scope [$AdminConfig getid /Node:$nodeName/]

  foreach queue [$AdminTask listSIBJMSQueues $scope] {
    set name [$AdminConfig showAttribute $queue name]
    if { $name == $jmsQName } {
      putInfo "The $jmsQName SIB JMS queue already exists."
      return
    }
  }

  putTrace "Create a new SIB JMS queue named $jmsQName."
  set params [list -name $jmsQName -jndiName $jmsQJNDI -description $jmsQDesc -queueName $SIBQName]
  $AdminTask createSIBJMSQueue $scope $params

}

proc createSIBJMSTopic {nodeName jmsTName jmsTJNDI jmsTDesc SIBTName SIBTopicSpace} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig
  global AdminTask

  #--------------------------------------------------------------------
  # Create SIB JMS topic
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create SIB JMS topic                             "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts " SIB JMS topic:                                                "
  puts "    name                $jmsTName                              "
  puts "    JNDI                $jmsTJNDI                              "
  puts "    description         $jmsTDesc                              "
  puts "    SIB topic           $SIBTName                              "
  puts "    SIB topic space     $SIBTopicSpace                         "
  puts "---------------------------------------------------------------"
  puts ""

  #--------------------------------------------------------------------
  # Create SIB JMS topic that references a SIB TopicSpace
  #--------------------------------------------------------------------

  set scope [$AdminConfig getid /Node:$nodeName/]

  foreach topic [$AdminTask listSIBJMSTopics $scope] {
    set name [$AdminConfig showAttribute $topic name]
    if { $name == $jmsTName } {
      putInfo "The $jmsTName SIB JMS topic already exists."
      return
    }
  }

  putTrace "Create a new SIB JMS topic named $jmsTName."
  set params [list -name $jmsTName -jndiName $jmsTJNDI -description $jmsTDesc -topicName $SIBTName -topicSpace $SIBTopicSpace]
  $AdminTask createSIBJMSTopic $scope $params

}

proc createSIBQueue {nodeName serverName SIBQName SIBusName} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig
  global AdminTask

  #--------------------------------------------------------------------
  # Create SIB queue
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create SIB queue                                 "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " SIB queue:                                                    "
  puts "    name                $SIBQName                              "
  puts " SI bus:                                                       "
  puts "    name                $SIBusName                             "
  puts "---------------------------------------------------------------"
  puts ""

  foreach queue [$AdminConfig list SIBQueue] {
    set identifier [$AdminConfig showAttribute $queue identifier]
    if { $identifier == $SIBQName } {
      putInfo "The $SIBQName SIB queue already exists."
      return
    }
  }

  #--------------------------------------------------------------------
  # Create SIB queue
  #--------------------------------------------------------------------

  putTrace "Create a new SIB queue named $SIBQName."
  set params [list -bus $SIBusName -name $SIBQName -type Queue -node $nodeName -server $serverName]    
  $AdminTask createSIBDestination $params

}

proc createSIBJMSActivationSpec {nodeName activationSpecName activationSpecJndiName jmsQJNDI destinationType authAlias SIBusName} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig
  global AdminTask

  #--------------------------------------------------------------------
  # Create a SIB activation spec for an MDB listening to a queue
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create SIB JMS activation spec                   "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts " Activation spec:                                              "
  puts "    name                $activationSpecName                    "
  puts "    JNDI                $activationSpecJndiName                "
  puts "    destination JNDI    $jmsQJNDI                              "
  puts "    destination type    $destinationType                       "
  puts "    auth alias          $authAlias                             "
  puts " SI bus:                                                       "
  puts "    name                $SIBusName                             "
  puts "---------------------------------------------------------------"
  puts ""

  set scope [$AdminConfig getid /Node:$nodeName/]

  foreach spec [$AdminTask listSIBJMSActivationSpecs $scope] {
    set name [$AdminConfig showAttribute $spec name]
    if { $name == $activationSpecName } {
      putInfo "The $activationSpecName SIB JMS activation spec already exists."
      return
    }
  }

  #--------------------------------------------------------------------
  # Create SIB JMS activation spec
  #--------------------------------------------------------------------

  putTrace "Create a new SIB JMS activation spec named $activationSpecName."
  set params [list -name $activationSpecName -jndiName $activationSpecJndiName -busName $SIBusName -destinationJndiName $jmsQJNDI -destinationType $destinationType]
  if { !($authAlias == "") } {
    lappend params -authenticationAlias $authAlias
  }
  $AdminTask createSIBJMSActivationSpec $scope $params

}

proc enableService {nodeName serverName serviceName} {

  #--------------------------------------------------------------------
  # Set up globals  
  #--------------------------------------------------------------------

  global AdminConfig

  #--------------------------------------------------------------------
  # Enable service
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Enable service                                   "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " Service:                                                      "
  puts "    name                $serviceName                           "
  puts "---------------------------------------------------------------"
  puts ""

  #--------------------------------------------------------------------
  # Get a list of service objects. There should only be one.
  # If there's more than one, use the first one found.
  #--------------------------------------------------------------------

  putTrace "Get the ID for the $serviceName service."

  set scope [$AdminConfig getid /Node:$nodeName/Server:$serverName]

  set services [$AdminConfig list $serviceName $scope]

  if {[llength $services] == 0} {
    throw "The $serviceName service could not be found."
  }

  set serviceID [lindex $services 0]

  #--------------------------------------------------------------------
  # Set the service enablement
  #--------------------------------------------------------------------

  set enable true
  if {[$AdminConfig showAttribute $serviceID enable] == $enable} {
    putInfo "The $serviceName service is already enabled."
  } else {
    putTrace "Enable the $serviceName service."
    $AdminConfig modify $serviceID "{enable $enable}"
  }

}

proc createSharedLibrary {nodeName serverName libName classpath} {

  #--------------------------------------------------------------------
  # set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  #--------------------------------------------------------------------
  # Create shared library 
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create shared library                            "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " Shared library:                                               "
  puts "    name                $libName                               "
  puts "    classpath           $classpath                             "
  puts "---------------------------------------------------------------"
  puts ""

  set server [$AdminConfig getid /Node:$nodeName/Server:$serverName]
  
  #--------------------------------------------------------------------
  # Check if the library already exists
  #--------------------------------------------------------------------
  set library [$AdminConfig getid /Node:$nodeName/Server:$serverName/Library:$libName]
  if {[llength $library] != 0} {
    putInfo "The $libName library already exists."
    return
  }
  
  set name_attr      [list name $libName]
  set classPath_attr [list classPath $classpath] 
  set params [list $name_attr $classPath_attr]
  $AdminConfig create Library $server $params

}

proc createLibraryRef {libName appName} {

  #--------------------------------------------------------------------
  # set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  #--------------------------------------------------------------------
  # Create the library reference at the application level
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create application library reference             "
  puts "---------------------------------------------------------------"
  puts " Library reference:                                            "
  puts "    name                $libName                               "
  puts "    application         $appName                               "
  puts "---------------------------------------------------------------"
  puts ""

  #--------------------------------------------------------------------
  # Check if the library reference already exists
  #--------------------------------------------------------------------

  foreach sharedLibraryEntry [$AdminConfig list LibraryRef] {
    set sharedLibraryEntry [$AdminConfig showAttribute $sharedLibraryEntry libraryName]
    if { [string compare $sharedLibraryEntry $libName] == 0 } {
      putInfo "The $libName library reference already exists."
      return
    }
  }

  putTrace "Create a new library reference named $libName."

  set deployment  [$AdminConfig getid /Deployment:$appName/]
  set appDeploy   [$AdminConfig showAttribute $deployment deployedObject]
  set classLoader [$AdminConfig showAttribute $appDeploy classloader]

  set libraryName_attr        [list libraryName $libName]
  set sharedClassloader_attr  [list sharedClassloader true]
  set params [list $libraryName_attr $sharedClassloader_attr]
  $AdminConfig create LibraryRef $classLoader $params

}

proc createModuleLibraryRef {libName appName moduleName clMode} {

  #--------------------------------------------------------------------
  # set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  #--------------------------------------------------------------------
  # Create the library reference at the application level
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Create application library reference             "
  puts "---------------------------------------------------------------"
  puts " Library reference:                                            "
  puts "    name                $libName                               "
  puts "    application         $appName                               "
  puts "    module              $moduleName                            "
  puts "    classLoaderMode     $clMode                                "
  puts "---------------------------------------------------------------"
  puts ""

  #--------------------------------------------------------------------
  # Check if the library reference already exists
  #--------------------------------------------------------------------

  foreach sharedLibraryEntry [$AdminConfig list LibraryRef] {
    set sharedLibraryEntry [$AdminConfig showAttribute $sharedLibraryEntry libraryName]
    if { [string compare $sharedLibraryEntry $libName] == 0 } {
      putInfo "The $libName library reference already exists."
      return
    }
  }

  putTrace "Create a new library reference named $libName for $moduleName war."

  set deployment   [$AdminConfig getid /Deployment:$appName/]
  set appDeploy    [$AdminConfig showAttribute $deployment deployedObject]
  set appModules   [lindex [$AdminConfig showAttribute $appDeploy modules] 0]

  #---------------------------------------
  # loop through the modules
  #---------------------------------------
  foreach appModule $appModules {
    set appModuleUri [$AdminConfig showAttribute $appModule uri]
    set appModuleName [lindex [split $appModuleUri .] 0]
    set i [string last ".war" $appModuleUri]
    if {$i >= 0} {
      # this is a web module
      if {$moduleName == "*" || $appModuleName == $moduleName} {
        $AdminConfig modify $appModule "{classloaderMode $clMode}"

        set cl [$AdminConfig list Classloader $appModule]
        if {[string equal $cl ""]} {
          $AdminConfig create Classloader $webModule "{mode $clMode}"
        } else {
          $AdminConfig modify $cl "{mode $clMode}"
        }
        set libraryName_attr        [list libraryName $libName]
        set sharedClassloader_attr  [list sharedClassloader true]
        set params [list $libraryName_attr $sharedClassloader_attr]
        $AdminConfig create LibraryRef $cl $params
      }
    }
  }

}



proc modifyClassLoader {appName mode} {

  #--------------------------------------------------------------------
  # Set up globals  
  #--------------------------------------------------------------------

  global AdminConfig

  #--------------------------------------------------------------------
  # Modify the class loader
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Modify class loader                              "
  puts "---------------------------------------------------------------"
  puts " Application:                                                  "
  puts "    name                $appName                               "
  puts " Class loader:                                                 "
  puts "    mode                $mode                                  "
  puts "---------------------------------------------------------------"
  puts ""

  set deployment  [$AdminConfig getid /Deployment:$appName/]
  set appDeploy   [$AdminConfig showAttribute $deployment deployedObject]
  set classLoader [$AdminConfig showAttribute $appDeploy classloader]

  $AdminConfig modify $classLoader "{mode $mode}"

}

proc getEndPointPort {nodeName serverName endPointName} {

  #--------------------------------------------------------------------
  # Set up globals  
  #--------------------------------------------------------------------

  global AdminConfig

  #--------------------------------------------------------------------
  # Retrieve the endpoint port
  #--------------------------------------------------------------------

  foreach serverEntry [$AdminConfig list ServerEntry [$AdminConfig getid /Node:$nodeName]] {
    set serverEntryName [$AdminConfig showAttribute $serverEntry serverName]
    if {$serverEntryName == $serverName} {
      foreach namedEndPoint [$AdminConfig list NamedEndPoint $serverEntry] {
        set name [$AdminConfig showAttribute $namedEndPoint endPointName]
        if {$name == $endPointName} {
          set endPoint [$AdminConfig showAttribute $namedEndPoint endPoint]
          return [$AdminConfig showAttribute $endPoint port]
        }
      }
    }
  }

}

proc isAppInstalled {appName} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminApp

  #--------------------------------------------------------------------
  # Check if the application is already installed
  #--------------------------------------------------------------------

  set installedApps [$AdminApp list]
  
  if { [lsearch $installedApps $appName] != -1 } {
    putInfo "The $appName application is already installed."
    return true
  }
  
  return false

}

proc installApp {nodeName serverName earName appName options} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------

  global AdminApp

  #--------------------------------------------------------------------
  # Install the application
  #--------------------------------------------------------------------

  puts ""
  puts "---------------------------------------------------------------"
  puts "              Install application                              "
  puts "---------------------------------------------------------------"
  puts " Scope:                                                        "
  puts "    node                $nodeName                              "
  puts "    server              $serverName                            "
  puts " EAR:                                                          "
  puts "    name                $earName                               "
  puts "    application         $appName                               "
  puts "    destination         \$(APP_INSTALL_ROOT)/\$(CELL)          "
  puts "    usedefaultbindings  true                                   "
  puts "    noejbdeploy         true                                   "
  if { $options != "" } {
    puts "    additional options  $options                               "
  }
  puts "---------------------------------------------------------------"
  puts ""

  if {[isAppInstalled $appName]} {
    return
  }

  lappend options -usedefaultbindings -nocreateMBeansForResources -appname $appName -installed.ear.destination "\$(APP_INSTALL_ROOT)/\$(CELL)" -node $nodeName -server $serverName -nodeployejb
  $AdminApp install $earName $options

}

proc save {} {

  #--------------------------------------------------------------------
  # Set up globals
  #--------------------------------------------------------------------
  
  global AdminConfig

  #--------------------------------------------------------------------
  # Save all the changes
  #--------------------------------------------------------------------
  
  puts ""
  puts "---------------------------------------------------------------"
  puts "              Save                                             "
  puts "---------------------------------------------------------------"
  puts ""
  
  $AdminConfig save

}

#--------------------------------------------------------------------
# Gets the nodes that contain a server of the specified type.
#
# Params:
#      serverType     The server type.
#
# Returns:
#      A list of node names that contain a server of the specified type.
#--------------------------------------------------------------------
proc getNodes {serverType} {
  
  global AdminConfig

  set nodeNames ""

  foreach nodeEntry [$AdminConfig list Node] {
    foreach serverEntry [$AdminConfig list ServerEntry $nodeEntry] {
      if { $serverType == [$AdminConfig showAttribute $serverEntry serverType] } {
        lappend nodeNames [$AdminConfig showAttribute $nodeEntry name]
        break
      }     
    }
  }

  return $nodeNames

}

#--------------------------------------------------------------------
# Formats an error message
#--------------------------------------------------------------------
proc formatError {msg} {
  return "SAMP ERROR: $msg"
}

#--------------------------------------------------------------------
# Prints an error message
#--------------------------------------------------------------------
proc putError {msg} {
  puts [formatError $msg]
}

#--------------------------------------------------------------------
# Prints an information message
#--------------------------------------------------------------------
proc putInfo {msg} {
  puts "SAMP INFO: $msg"
}

#--------------------------------------------------------------------
# Prints a trace message
#--------------------------------------------------------------------
proc putTrace {msg} {
  global TRACE_ENABLED
  if { $TRACE_ENABLED } {
    puts "SAMP TRACE: $msg"
  }
}

#--------------------------------------------------------------------
# Throws an error message
#--------------------------------------------------------------------
proc throw {msg} {
  return -code error [formatError $msg]
}
